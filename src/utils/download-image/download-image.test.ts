// generated by GitHub Copilot
import { vi, describe, it, expect } from "vitest";
import { downloadImage } from "./download-image";
import { supabase } from "lib/supabaseClient";

vi.mock("lib/supabaseClient", () => ({
  supabase: {
    storage: {
      from: vi.fn(() => ({
        download: vi.fn(),
      })),
    },
  },
}));

describe("downloadImage", () => {
  it("downloads an image and sets the state with the URL", async () => {
    const mockSetState = vi.fn();
    const mockData = new Blob(["mockImageData"], { type: "image/png" });
    const mockCreateObjectURL = vi.fn(() => "mockObjectURL");

    // Mock supabase response
    const mockDownload = vi.fn().mockResolvedValue({
      data: mockData,
      error: null,
    });
    (supabase.storage.from as any).mockReturnValue({
      download: mockDownload,
    });

    // Mock URL.createObjectURL
    global.URL.createObjectURL = mockCreateObjectURL;

    await downloadImage("path/to/image.png", "testBucket", mockSetState);

    expect(supabase.storage.from).toHaveBeenCalledWith("testBucket");
    expect(supabase.storage.from("testBucket").download).toHaveBeenCalledWith(
      "path/to/image.png",
    );
    expect(mockCreateObjectURL).toHaveBeenCalledWith(mockData);
    expect(mockSetState).toHaveBeenCalledWith("mockObjectURL");
  });

  it("logs an error if the download fails", async () => {
    const consoleSpy = vi.spyOn(console, "log").mockImplementation(() => {});

    // Mock supabase error response
    (supabase.storage.from("").download as any).mockResolvedValue({
      data: null,
      error: { message: "Download failed" },
    });

    await downloadImage("path/to/image.png", "testBucket");

    expect(consoleSpy).toHaveBeenCalledWith(
      "Error downloading image: ",
      "Download failed",
    );

    consoleSpy.mockRestore();
  });
});
